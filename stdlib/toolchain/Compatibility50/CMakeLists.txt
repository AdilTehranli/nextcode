# Don't build the libraries for 64-bit watchOS targets;
# there is no back-deployment to them.
list(REMOVE_ITEM NEXTCODE_SDK_WATCHOS_ARCHITECTURES "arm64" "arm64e")

set(library_name "nextcodeCompatibility50")

add_nextcode_target_library("${library_name}" STATIC
  ProtocolConformance.cpp
  Overrides.cpp

  TARGET_SDKS ${NEXTCODE_DARWIN_PLATFORMS}

  C_COMPILE_FLAGS
    ${CXX_COMPILE_FLAGS}
    "-DNEXTCODE_THREADING_IS_COMPATIBILITY_LIBRARY"
  LINK_FLAGS ${CXX_LINK_FLAGS}
  INCORPORATE_OBJECT_LIBRARIES nextcodeCompatibilityThreading
  NEXTCODE_COMPILE_FLAGS ${NEXTCODE_STANDARD_LIBRARY_NEXTCODE_FLAGS}
  DEPLOYMENT_VERSION_OSX ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_OSX}
  DEPLOYMENT_VERSION_IOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_IOS}
  DEPLOYMENT_VERSION_TVOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_TVOS}
  DEPLOYMENT_VERSION_WATCHOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_WATCHOS}
  DEPLOYMENT_VERSION_XROS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_XROS}

  INSTALL_IN_COMPONENT compiler
  INSTALL_WITH_SHARED)


# FIXME: We need a more flexible mechanism to add lipo targets generated by
# add_nextcode_target_library to the ALL target. Until then this hack is necessary
# to ensure these libraries build.
foreach(sdk ${NEXTCODE_SDKS})
  set(target_name "${library_name}-${NEXTCODE_SDK_${sdk}_LIB_SUBDIR}")
  if(NOT TARGET "${target_name}")
    continue()
  endif()

  set_target_properties("${target_name}"
    PROPERTIES
      EXCLUDE_FROM_ALL FALSE)
endforeach()
