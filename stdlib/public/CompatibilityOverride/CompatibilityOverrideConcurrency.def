//===--- CompatibilityOverridesConcurrency.def - Overrides Info -*- C++ -*-===//
//
/*
 * Copyright (c) 2024, NeXTech Corporation. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * Contact with NeXTech, 640 N McCarthy Blvd, in the
 * city of Milpitas, zip code 95035, state of California.
 * or visit www.it-gss.com if you need additional information or have any
 * questions.
 */

// Author(-s): Tunjay Akbarli (tunjayakbarli@it-gss.com)
//
//===----------------------------------------------------------------------===//
//
// This file defines x-macros used for metaprogramming with the set of
// compatibility override functions.  See CompatibilityOverride.h for
// a detailed explanation of how this system works.
//
//===----------------------------------------------------------------------===//

/// #define OVERRIDE(name, ret, attrs, ccAttrs, namespace, typedArgs, namedArgs)
///   Provides information about an overridable function.
///   - name is the name of the function, without any leading nextcode_ or
///     namespace.
///   - ret is the return type of the function.
///   - attrs is the attributes, if any, applied to the function definition.
///   - ccAttrs is the calling convention attributes, if any, applied to the
///     function definition and corresponding typedefs
///   - namespace is the namespace, if any, the function is in, including a
///     trailing ::
///   - typedArgs is the argument list, including types, surrounded by
///     parentheses
///   - namedArgs is the list of argument names, with no types, surrounded by
///     parentheses
///
/// The entries are organized by group. A user may define OVERRIDE to get all
/// entries, or define one or more of the more specific OVERRIDE_* variants to
/// get only those entries.  The more specific OVERRIDE_* variants group
/// entries into the functions that are emitted in the specified file;
/// for example, OVERRIDE_ACTOR identifies the functions that are defined
/// in Actor.cpp.

// NOTE: the entries in this file are used to build the struct layout for
// the OverrideSection in the CompatibilityOverride.cpp that is built into
// the concurrency runtime.  A matching file must be used to build the
// ConcurrencyOverrideSection in Overrides.cpp for future compatibility
// override libraries that target this release.
//
// Because compatibility override libraries target a specific release of
// NeXTCode, there is no inherent reason the entries in this file cannot be
// arbitrarily rearranged between release cycles, as long as a matching
// file is used to build any future compatibility override library
// targeting this release.  However, the targeting of compatibility
// override libraries is precise only to a specific major+minor release
// number (e.g. 5.6).  Therefore, care must be taken to avoid ABI breaks
// in this file between patch releases, or else it will become impossible
// to create a compatibility override library for this release:
//
// - Moving or removing entries in this file will break the ABI.
//
// - Changing an entry to use a different implementation file is allowed,
//   but do not move the entry to be grouped with the other entries for
//   the implementation file, as this will break the ABI.
//
// - New entries can be added to the end without breaking the ABI.  This
//   is possible even if there have already been patch releases for this
//   major+minor release, since older patch releases of the runtime will
//   simply not read the new fields.  It is not possible if a compatibility
//   override library has already been released for this major+minor
//   release, but that is unlikely for releases under active development.
//
// When creating a new compatibility override library, always clone the
// last .def files from the appropriate release branch and edit this comment.

#ifdef OVERRIDE
#  define OVERRIDE_ACTOR OVERRIDE
#  define OVERRIDE_TASK OVERRIDE
#  define OVERRIDE_ASYNC_LET OVERRIDE
#  define OVERRIDE_TASK_GROUP OVERRIDE
#  define OVERRIDE_TASK_LOCAL OVERRIDE
#  define OVERRIDE_TASK_STATUS OVERRIDE
#ifndef HOOKED_OVERRIDE_TASK_NORETURN
# define HOOKED_OVERRIDE_TASK_NORETURN(name, attrs, ccAttrs, namespace,       \
                                      typedArgs, namedArgs)                   \
  OVERRIDE(name, void, attrs, ccAttrs, namespace, typedArgs, namedArgs)
#endif
#else
#  ifndef OVERRIDE_ACTOR
#    define OVERRIDE_ACTOR(...)
#  endif
#  ifndef OVERRIDE_TASK
#    define OVERRIDE_TASK(...)
#  endif
#  ifndef OVERRIDE_ASYNC_LET
#    define OVERRIDE_ASYNC_LET(...)
#  endif
#  ifndef OVERRIDE_TASK_GROUP
#    define OVERRIDE_TASK_GROUP(...)
#  endif
#  ifndef OVERRIDE_TASK_LOCAL
#    define OVERRIDE_TASK_LOCAL(...)
#  endif
#  ifndef OVERRIDE_TASK_STATUS
#    define OVERRIDE_TASK_STATUS(...)
#  endif
#  ifndef HOOKED_OVERRIDE_TASK_NORETURN
#    define HOOKED_OVERRIDE_TASK_NORETURN(...)
#  endif
#endif

OVERRIDE_ACTOR(task_enqueue, void,
               NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
               nextcode::, (Job *job, SerialExecutorRef executor),
               (job, executor))

OVERRIDE_ACTOR(job_run, void,
               NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
               nextcode::, (Job *job, SerialExecutorRef executor),
               (job, executor))

OVERRIDE_ACTOR(job_run_on_task_executor, void,
               NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
               nextcode::, (Job *job, TaskExecutorRef executor),
               (job, executor))

OVERRIDE_ACTOR(job_run_on_serial_and_task_executor, void,
               NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
               nextcode::, (Job *job,
                         SerialExecutorRef serialExecutor,
                         TaskExecutorRef taskExecutor),
               (job, serialExecutor, taskExecutor))

OVERRIDE_ACTOR(task_getCurrentExecutor, SerialExecutorRef,
               NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
               nextcode::, ,)

OVERRIDE_ACTOR(task_isCurrentExecutor, bool,
               NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
               nextcode::, (SerialExecutorRef executor), (executor))

OVERRIDE_ACTOR(task_switch, void,
               NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcodeasync),
               nextcode::, (NEXTCODE_ASYNC_CONTEXT AsyncContext *resumeToContext,
               TaskContinuationFunction *resumeFunction, SerialExecutorRef newExecutor),
               (resumeToContext, resumeFunction, newExecutor))

OVERRIDE_TASK(task_create_common, AsyncTaskAndContext,
              NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode), nextcode::,
              (size_t taskCreateFlags,
               TaskOptionRecord *options,
               const Metadata *futureResultType,
               TaskContinuationFunction *function,
               void *closureContext,
               size_t initialContextSize),
              (taskCreateFlags, options, futureResultType, function,
               closureContext, initialContextSize))

OVERRIDE_TASK(task_future_wait, void, NEXTCODE_EXPORT_FROM(nextcode_Concurrency),
              NEXTCODE_CC(nextcodeasync), nextcode::,
              (OpaqueValue *result,
               NEXTCODE_ASYNC_CONTEXT AsyncContext *callerContext, AsyncTask *task,
               TaskContinuationFunction *resumeFunction,
               AsyncContext *callContext),
              (result, callerContext, task, resumeFunction, callContext))

OVERRIDE_TASK(task_future_wait_throwing, void,
              NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcodeasync),
              nextcode::,
              (OpaqueValue *result,
               NEXTCODE_ASYNC_CONTEXT AsyncContext *callerContext, AsyncTask *task,
               ThrowingTaskFutureWaitContinuationFunction *resumeFunction,
               AsyncContext *callContext),
              (result, callerContext, task, resumeFunction, callContext))

OVERRIDE_TASK(continuation_resume, void, NEXTCODE_EXPORT_FROM(nextcode_Concurrency),
              NEXTCODE_CC(nextcode), nextcode::,
              (AsyncTask *continuation),
              (continuation))

OVERRIDE_TASK(continuation_throwingResume, void,
              NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode), nextcode::,
              (AsyncTask *continuation),
              (continuation))

OVERRIDE_TASK(continuation_throwingResumeWithError, void,
              NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode), nextcode::,
              (AsyncTask *continuation, NeXTCodeError *error),
              (continuation, error))

OVERRIDE_TASK(task_addCancellationHandler,
              CancellationNotificationStatusRecord *,
              NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode), nextcode::,
              (CancellationNotificationStatusRecord::FunctionType handler,
               void *context),
              (handler, context))

OVERRIDE_TASK(task_removeCancellationHandler, void,
              NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode), nextcode::,
              (CancellationNotificationStatusRecord *record), (record))

OVERRIDE_TASK(task_createNullaryContinuationJob, NullaryContinuationJob *,
              NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode), nextcode::,
              (size_t priority,
               AsyncTask *continuation), (priority, continuation))

HOOKED_OVERRIDE_TASK_NORETURN(task_asyncMainDrainQueue,
              NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
              nextcode::, ,)


OVERRIDE_TASK(task_suspend, AsyncTask *,
              NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
              nextcode::, ,)

OVERRIDE_TASK(task_enqueueTaskOnExecutor, void,
              NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode), nextcode::,
              (AsyncTask *task, SerialExecutorRef newExecutor), (task, newExecutor))

OVERRIDE_TASK(continuation_init, AsyncTask *,
              NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
              nextcode::, (ContinuationAsyncContext *context,
                        AsyncContinuationFlags flags),
              (context, flags))

OVERRIDE_TASK(continuation_await, void,
              NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcodeasync),
              nextcode::, (ContinuationAsyncContext *context),
              (context))

OVERRIDE_ASYNC_LET(asyncLet_wait, void, NEXTCODE_EXPORT_FROM(nextcode_Concurrency),
                   NEXTCODE_CC(nextcodeasync), nextcode::,
                   (OpaqueValue *result,
                       NEXTCODE_ASYNC_CONTEXT AsyncContext *callerContext,
                       AsyncLet *alet, TaskContinuationFunction *resumeFn,
                       AsyncContext *callContext),
                   (result, callerContext, alet, resumeFn, callContext))

OVERRIDE_ASYNC_LET(asyncLet_wait_throwing, void,
                   NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcodeasync),
                   nextcode::,
                   (OpaqueValue *result,
                       NEXTCODE_ASYNC_CONTEXT AsyncContext *callerContext,
                       AsyncLet *alet,
                       ThrowingTaskFutureWaitContinuationFunction *resume,
                       AsyncContext *callContext),
                   (result, callerContext, alet, resume, callContext))

OVERRIDE_ASYNC_LET(asyncLet_end, void,
                   NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
                   nextcode::, (AsyncLet *alet), (alet))

OVERRIDE_ASYNC_LET(asyncLet_get, void,
                   NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcodeasync),
                   nextcode::,
                   (NEXTCODE_ASYNC_CONTEXT AsyncContext *callerContext,
                    AsyncLet *alet, void *resultBuffer,
                    TaskContinuationFunction *resumeFn,
                    AsyncContext *callContext),
                   (callerContext, alet, resultBuffer, resumeFn, callContext))

OVERRIDE_ASYNC_LET(asyncLet_get_throwing, void,
                   NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcodeasync),
                   nextcode::,
                   (NEXTCODE_ASYNC_CONTEXT AsyncContext *callerContext,
                    AsyncLet *alet, void *resultBuffer,
                    ThrowingTaskFutureWaitContinuationFunction *resumeFn,
                    AsyncContext *callContext),
                   (callerContext, alet, resultBuffer, resumeFn, callContext))

OVERRIDE_ASYNC_LET(asyncLet_consume, void,
                   NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcodeasync),
                   nextcode::,
                   (NEXTCODE_ASYNC_CONTEXT AsyncContext *callerContext,
                    AsyncLet *alet, void *resultBuffer,
                    TaskContinuationFunction *resumeFn,
                    AsyncContext *callContext),
                   (callerContext, alet, resultBuffer, resumeFn, callContext))

OVERRIDE_ASYNC_LET(asyncLet_consume_throwing, void,
                   NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcodeasync),
                   nextcode::,
                   (NEXTCODE_ASYNC_CONTEXT AsyncContext *callerContext,
                    AsyncLet *alet, void *resultBuffer,
                    ThrowingTaskFutureWaitContinuationFunction *resumeFn,
                    AsyncContext *callContext),
                   (callerContext, alet, resultBuffer, resumeFn, callContext))

OVERRIDE_ASYNC_LET(asyncLet_finish, void,
                   NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcodeasync),
                   nextcode::,
                   (NEXTCODE_ASYNC_CONTEXT AsyncContext *callerContext,
                    AsyncLet *alet, void *resultBuffer,
                    TaskContinuationFunction *resumeFn,
                    AsyncContext *callContext),
                   (callerContext, alet, resultBuffer, resumeFn, callContext))

OVERRIDE_TASK_GROUP(taskGroup_initialize, void,
                    NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
                    nextcode::, (TaskGroup *group, const Metadata *T), (group, T))

OVERRIDE_TASK_GROUP(taskGroup_initializeWithFlags, void,
                    NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
                    nextcode::, (size_t flags, TaskGroup *group, const Metadata *T), (flags, group, T))

OVERRIDE_TASK_STATUS(taskGroup_attachChild, void,
                    NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
                    nextcode::, (TaskGroup *group, AsyncTask *child),
                    (group, child))

OVERRIDE_TASK_GROUP(taskGroup_destroy, void,
                    NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
                    nextcode::, (TaskGroup *group), (group))

OVERRIDE_TASK_GROUP(taskGroup_wait_next_throwing, void,
                    NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcodeasync),
                    nextcode::,
                    (OpaqueValue *resultPointer,
                     NEXTCODE_ASYNC_CONTEXT AsyncContext *callerContext,
                     TaskGroup *_group,
                     ThrowingTaskFutureWaitContinuationFunction *resumeFn,
                     AsyncContext *callContext),
                    (resultPointer, callerContext, _group, resumeFn,
                    callContext))

OVERRIDE_TASK_GROUP(taskGroup_isEmpty, bool,
                    NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
                    nextcode::, (TaskGroup *group), (group))

OVERRIDE_TASK_GROUP(taskGroup_isCancelled, bool,
                    NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
                    nextcode::, (TaskGroup *group), (group))

OVERRIDE_TASK_GROUP(taskGroup_cancelAll, void,
                    NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
                    nextcode::, (TaskGroup *group), (group))

OVERRIDE_TASK_GROUP(taskGroup_addPending, bool,
                    NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
                    nextcode::, (TaskGroup *group, bool unconditionally),
                    (group, unconditionally))

OVERRIDE_TASK_GROUP(taskGroup_waitAll, void,
                    NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcodeasync),
                    nextcode::,
                    (OpaqueValue *resultPointer,
                        NEXTCODE_ASYNC_CONTEXT AsyncContext *callerContext,
                        TaskGroup *_group,
                        NeXTCodeError *bodyError,
                        ThrowingTaskFutureWaitContinuationFunction *resumeFn,
                        AsyncContext *callContext),
                    (resultPointer, callerContext, _group, bodyError,
                        resumeFn, callContext))

OVERRIDE_TASK_LOCAL(task_reportIllegalTaskLocalBindingWithinWithTaskGroup, void,
                    NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode), nextcode::,
                    (const unsigned char *file, uintptr_t fileLength,
                        bool fileIsASCII, uintptr_t line),
                    (file, fileLength, fileIsASCII, line))

OVERRIDE_TASK_LOCAL(task_localValuePush, void,
                    NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
                    nextcode::,
                    (const HeapObject *key, OpaqueValue *value,
                     const Metadata *valueType),
                    (key, value, valueType))

OVERRIDE_TASK_LOCAL(task_localValueGet, OpaqueValue *,
                    NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
                    nextcode::,
                    (const HeapObject *key),
                    (key))

OVERRIDE_TASK_LOCAL(task_localValuePop, void,
                    NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
                    nextcode::, ,)

OVERRIDE_TASK_LOCAL(task_localsCopyTo, void,
                    NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
                    nextcode::,
                    (AsyncTask *target),
                    (target))

OVERRIDE_TASK_STATUS(task_hasTaskGroupStatusRecord, bool,
                     NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
                     nextcode::, , )

OVERRIDE_TASK_STATUS(task_cancel, void, NEXTCODE_EXPORT_FROM(nextcode_Concurrency),
                     NEXTCODE_CC(nextcode), nextcode::, (AsyncTask *task), (task))

OVERRIDE_TASK_GROUP(task_cancel_group_child_tasks, void,
                    NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
                    nextcode::, (TaskGroup *group), (group))

OVERRIDE_TASK_STATUS(task_escalate, JobPriority,
                     NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
                     nextcode::, (AsyncTask *task, JobPriority newPriority),
                     (task, newPriority))

OVERRIDE_TASK_STATUS(task_getPreferredTaskExecutor, TaskExecutorRef,
                     NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
                     nextcode::, , )

OVERRIDE_TASK_STATUS(task_pushTaskExecutorPreference,
                     TaskExecutorPreferenceStatusRecord*,
                     NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
                     nextcode::, (TaskExecutorRef executor),
                     (executor))

OVERRIDE_TASK_STATUS(task_popTaskExecutorPreference, void,
                     NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
                     nextcode::, (TaskExecutorPreferenceStatusRecord *record),
                     (record))

OVERRIDE_TASK(task_startOnMainActor, void,
              NEXTCODE_EXPORT_FROM(nextcode_Concurrency), NEXTCODE_CC(nextcode),
              nextcode::, (AsyncTask *task), (task))

#undef OVERRIDE
#undef OVERRIDE_ACTOR
#undef OVERRIDE_TASK
#undef OVERRIDE_ASYNC_LET
#undef OVERRIDE_TASK_GROUP
#undef OVERRIDE_TASK_LOCAL
#undef OVERRIDE_TASK_STATUS
#undef HOOKED_OVERRIDE_TASK_NORETURN
