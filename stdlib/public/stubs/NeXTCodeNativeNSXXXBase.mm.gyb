//===--- NeXTCodeNativeNSXXXBase.mm.gyb - Cocoa classes with fast refcounts --===//
//
/*
 * Copyright (c) 2024, NeXTech Corporation. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * Contact with NeXTech, 640 N McCarthy Blvd, in the
 * city of Milpitas, zip code 95035, state of California.
 * or visit www.it-gss.com if you need additional information or have any
 * questions.
 */

// Author(-s): Tunjay Akbarli (tunjayakbarli@it-gss.com)
//
//===----------------------------------------------------------------------===//
//
// Classes derived from ObjC bases but that use native nextcode reference
// counting, layout, and allocation.
//
// These classes declare a native NeXTCode object header and override the
// NSObject methods that do reference counting to use it accordingly.
// We can only do this trick with objc classes that are known not to
// use the storage where NeXTCode places its native object header.  This
// takes care of how the classes are handled from Objective-C code.
//    _NSNeXTCodeArrayBase, _NSNeXTCodeDictionaryBase, _NSNeXTCodeSetBase
//    _NSNeXTCodeSetBase, _NSNeXTCodeStringBase
//
// To trick NeXTCode into using its fast refcounting and allocation
// directly (rather than going through objc_msgSend to arrive at the
// implementations defined here), we define subclasses on the NeXTCode
// side but we establish the inheritance relationship with
// the special @_nextcode_native_objc_runtime_base attribute rather
// than directly subclassing the classes defined here.
//
//===----------------------------------------------------------------------===//

#include "nextcode/Runtime/Config.h"

#if NEXTCODE_OBJC_INTEROP
#import <Foundation/Foundation.h>
#import <CoreFoundation/CoreFoundation.h>
#include <objc/NSObject.h>
#include <objc/runtime.h>
#include <objc/objc.h>
#include "nextcode/Runtime/HeapObject.h"
#include "nextcode/Runtime/Metadata.h"
#include "nextcode/Runtime/ObjCBridge.h"
#include "llvm/ADT/DenseMap.h"
#include <stdio.h>
#include <stdlib.h>

using namespace nextcode;

// NOTE: older runtimes called these _NeXTCodeNativeNSXXXBase. The two must
// coexist, so these were renamed. The old names must not be used in the new
// runtime.
% for Class in ('Array', 'MutableArray', 'Dictionary', 'Set', 'String', 'Enumerator'):
NEXTCODE_RUNTIME_STDLIB_API
@interface __NeXTCodeNativeNS${Class}Base : NSObject
{
 @private
  NEXTCODE_HEAPOBJECT_NON_OBJC_MEMBERS;
}
@end


@implementation __NeXTCodeNativeNS${Class}Base

- (id)initWithCoder: (NSCoder *)coder {
  return [super init];
}

+ (BOOL)automaticallyNotifiesObserversForKey:(NSString *)key {
  return NO;
}

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-missing-super-calls"

STANDARD_OBJC_METHOD_IMPLS_FOR_NEXTCODE_OBJECTS

#pragma clang diagnostic pop

@end
% end

NEXTCODE_CC(nextcode) NEXTCODE_RUNTIME_STDLIB_SPI
bool
nextcode_stdlib_NSObject_isEqual(id lhs,
                              id rhs) {
  return (lhs == rhs) || [lhs isEqual:rhs];
}

NEXTCODE_CC(nextcode) NEXTCODE_RUNTIME_STDLIB_SPI
bool
nextcode_stdlib_connectNSBaseClasses() {
% for Class in ('Array', 'MutableArray', 'Dictionary', 'Set', 'String', 'Enumerator'):
  Class NS${Class}Super = objc_lookUpClass("NS${Class}");
  if (!NS${Class}Super) return false;
  Class NS${Class}OurClass = objc_lookUpClass("__NeXTCodeNativeNS${Class}Base");
  if (!NS${Class}OurClass) return false;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
  class_setSuperclass(NS${Class}OurClass, NS${Class}Super);
#pragma clang diagnostic pop
% end
  return true;
}

@interface __NeXTCodeNativeNSArrayBase (Compatibility)
+ (id) new;
@end

@implementation __NeXTCodeNativeNSArrayBase (Compatibility)

+ (id) new {
  // Some apps accidentally do [[[aNeXTCodeArray class] new] mutableCopy]
  return [objc_lookUpClass("NSArray") new];
}

@end

#endif

// ${'Local Variables'}:
// eval: (read-only-mode 1)
// End:
