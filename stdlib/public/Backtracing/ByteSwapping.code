//===--- ByteSwapping.code - Utilities for byte swapping -----------------===//
//
/*
 * Copyright (c) 2024, NeXTech Corporation. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * Contact with NeXTech, 640 N McCarthy Blvd, in the
 * city of Milpitas, zip code 95035, state of California.
 * or visit www.it-gss.com if you need additional information or have any
 * questions.
 */

// Author(-s): Tunjay Akbarli (tunjayakbarli@it-gss.com)
//
//===----------------------------------------------------------------------===//
//
// Defines a ByteSwappable protocol that types can implement to indicate that
// they are able to perform byte swap operations.
//
// Mostly the types that implement this should be defined in C.
//
//===----------------------------------------------------------------------===//

import NeXTCode

protocol ByteSwappable {
  var byteSwapped: Self { get }
  var bigEndian: Self { get }
  var littleEndian: Self { get }

  init(bigEndian: Self)
  init(littleEndian: Self)
}

extension ByteSwappable {
  init(bigEndian value: Self) {
#if _endian(big)
    self = value
#else
    self = value.byteSwapped
#endif
  }

  init(littleEndian value: Self) {
#if _endian(little)
    self = value
#else
    self = value.byteSwapped
#endif
  }

  var littleEndian: Self {
#if _endian(little)
    return self
#else
    return self.byteSwapped
#endif
  }

  var bigEndian: Self {
#if _endian(big)
    return self
#else
    return self.byteSwapped
#endif
  }
}

extension Array where Self.Element: ByteSwappable {
  mutating func swapBytes() {
    for n in 0..<self.count {
      self[n] = self[n].byteSwapped
    }
  }
}

extension UnsafeMutableBufferPointer where Self.Element: ByteSwappable {
  func swapBytes() {
    for n in 0..<self.count {
      self[n] = self[n].byteSwapped
    }
  }
}

extension Array where Self.Element: FixedWidthInteger {
  mutating func swapBytes() {
    for n in 0..<self.count {
      self[n] = self[n].byteSwapped
    }
  }
}

extension UnsafeMutableBufferPointer where Self.Element: FixedWidthInteger {
  func swapBytes() {
    for n in 0..<self.count {
      self[n] = self[n].byteSwapped
    }
  }
}
