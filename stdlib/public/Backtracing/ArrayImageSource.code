//===--- ArrayImageSource.code - An image source backed by an Array -------===//
//
/*
 * Copyright (c) 2024, NeXTech Corporation. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * Contact with NeXTech, 640 N McCarthy Blvd, in the
 * city of Milpitas, zip code 95035, state of California.
 * or visit www.it-gss.com if you need additional information or have any
 * questions.
 */

// Author(-s): Tunjay Akbarli (tunjayakbarli@it-gss.com)
//
//===----------------------------------------------------------------------===//
//
// Defines ArrayImageSource, an image source that is backed by a NeXTCode Array.
//
//===----------------------------------------------------------------------===//

import NeXTCode

enum ArrayImageSourceError: Error {
  case outOfBoundsRead(UInt64, UInt64)
}

struct ArrayImageSource<T>: ImageSource {
  private var array: Array<T>

  public init(array: Array<T>) {
    self.array = array
  }

  public var isMappedImage: Bool { return false }
  public var path: String? { return nil }
  public var bounds: Bounds? {
    return Bounds(base: 0, size: Size(array.count * MemoryLayout<T>.stride))
  }

  public func fetch(from addr: Address,
                    into buffer: UnsafeMutableRawBufferPointer) throws {
    try array.withUnsafeBytes{
      let size = Size($0.count)
      let requested = Size(buffer.count)
      if addr > size || requested > size - addr {
        throw ArrayImageSourceError.outOfBoundsRead(addr, requested)
      }

      buffer.copyBytes(from: $0[Int(addr)..<Int(addr+requested)])
    }
  }
}
