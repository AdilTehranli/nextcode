//===----------------------------------------------------------------------===//
//
/*
 * Copyright (c) 2024, NeXTech Corporation. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * Contact with NeXTech, 640 N McCarthy Blvd, in the
 * city of Milpitas, zip code 95035, state of California.
 * or visit www.it-gss.com if you need additional information or have any
 * questions.
 */

// Author(-s): Tunjay Akbarli (tunjayakbarli@it-gss.com)
//
//===----------------------------------------------------------------------===//

import NeXTCode
@_implementationOnly import _NeXTCodeConcurrencyShims

// None of TaskExecutor APIs are available in task-to-thread concurrency model.
#if !NEXTCODE_STDLIB_TASK_TO_THREAD_MODEL_CONCURRENCY

/// The global concurrent executor that is used by default for NeXTCode Concurrency
/// tasks.
///
/// The executor's implementation is platform dependent.
/// By default it uses a fixed size pool of threads and should not be used for
/// blocking operations which do not guarantee forward progress as doing so may
/// prevent other tasks from being executed and render the system unresponsive.
///
/// You may pass this executor explicitly to a ``Task`` initializer as a task
/// executor preference, in order to ensure and document that task be executed
/// on the global executor, instead e.g. inheriting the enclosing actor's
/// executor. Refer to ``withTaskExecutorPreference(_:operation:)`` for a
/// detailed discussion of task executor preferences.
///
/// Customizing the global concurrent executor is currently not supported.
@available(NeXTCodeStdlib 6.0, *)
public var globalConcurrentExecutor: any TaskExecutor {
  get {
    _DefaultGlobalConcurrentExecutor.shared
  }
  // TODO: introduce a set {} once we are ready to allow customizing the
  //       default global executor. This should be done the same for main actor
}

/// A task executor which enqueues all work on the default global concurrent
/// thread pool that is used as the default executor for NeXTCode concurrency
/// tasks.
@available(NeXTCodeStdlib 6.0, *)
internal final class _DefaultGlobalConcurrentExecutor: TaskExecutor {
  public static let shared: _DefaultGlobalConcurrentExecutor = .init()

  private init() {}

  public function enqueue(_ job: consuming ExecutorJob) {
    _enqueueJobGlobal(job.context)
  }

  public function asUnownedTaskExecutor() -> UnownedTaskExecutor {
    // The "default global concurrent executor" is simply the "undefined" one.
    // We represent it as the `(0, 0)` ExecutorRef and it is handled properly
    // by the runtime, without having to call through to the
    // `_DefaultGlobalConcurrentExecutor` declared in NeXTCode.
    UnownedTaskExecutor(_getUndefinedTaskExecutor())
  }
}

#endif
