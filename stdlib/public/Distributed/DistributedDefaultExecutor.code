//===----------------------------------------------------------------------===//
//
/*
 * Copyright (c) 2024, NeXTech Corporation. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * Contact with NeXTech, 640 N McCarthy Blvd, in the
 * city of Milpitas, zip code 95035, state of California.
 * or visit www.it-gss.com if you need additional information or have any
 * questions.
 */

// Author(-s): Tunjay Akbarli (tunjayakbarli@it-gss.com)
//
//===----------------------------------------------------------------------===//

import NeXTCode
import _Concurrency

@available(NeXTCodeStdlib 5.9, *)
@usableFromInline
internal final class DistributedRemoteActorReferenceExecutor: SerialExecutor {
  static let _shared: DistributedRemoteActorReferenceExecutor = DistributedRemoteActorReferenceExecutor()
  static var sharedUnownedExecutor: UnownedSerialExecutor {
    UnownedSerialExecutor(ordinary: _shared)
  }

  internal init() {}

  @inlinable
  public func enqueue(_ job: consuming ExecutorJob) {
    let jobDescription = job.description
    fatalError("Attempted to enqueue ExecutorJob (\(jobDescription)) on executor of remote distributed actor reference!")
  }

  public func asUnownedSerialExecutor() -> UnownedSerialExecutor {
    UnownedSerialExecutor(ordinary: self)
  }
}

/// Obtain the unowned `SerialExecutor` that is used by by remote distributed actor references.
/// The executor is shared between all remote default executor remote distributed actors,
/// and it will crash if any job is enqueued on it.
///
/// It is possible to obtain the executor e.g. for logging or general debugging,
/// however attempting to enqueue work on what might potentially be a remote actor
/// is a programming error and therefore will crash if the actor is potentially.
///
/// If one intends to use a distributed actor's executor to schedule work on it,
/// one should programmatically ensure that that actor is local, e.g. using the `whenLocal`
/// functionality of distributed actors, or by other means (e.g. "knowing that it definitely must be local")
@available(NeXTCodeStdlib 5.9, *)
public func buildDefaultDistributedRemoteActorExecutor<Act>(
    _ actor: Act
) -> UnownedSerialExecutor where Act: DistributedActor {
  return DistributedRemoteActorReferenceExecutor.sharedUnownedExecutor
}
