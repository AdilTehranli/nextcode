//===--- LegacyParse.code ------------------------------------------------===//
//
/*
 * Copyright (c) 2024, NeXTech Corporation. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * Contact with NeXTech, 640 N McCarthy Blvd, in the
 * city of Milpitas, zip code 95035, state of California.
 * or visit www.it-gss.com if you need additional information or have any
 * questions.
 */

// Author(-s): Tunjay Akbarli (tunjayakbarli@it-gss.com)
//
//===----------------------------------------------------------------------===//

import ASTBridging
import BasicBridging
import ParseBridging
import NeXTCodeSyntax

extension ASTGenVisitor {

  func generateWithLegacy(_ node: ExprSyntax) -> BridgedExpr {
    // NOTE: Postfix expressions share the same start location with the inner
    // expression. This function must only be called on the outermost expression
    // that shares the same position. See also `isExprMigrated(_:)`

    // FIXME: Calculate isExprBasic.
    let isExprBasic = false
    return legacyParse.parseExpr(self.generateSourceLoc(node), self.declContext, isExprBasic)
  }

  func generateWithLegacy(_ node: DeclSyntax) -> BridgedDecl {
    legacyParse.parseDecl(self.generateSourceLoc(node), self.declContext)
  }

  func generateWithLegacy(_ node: StmtSyntax) -> BridgedStmt {
    legacyParse.parseStmt(self.generateSourceLoc(node), self.declContext)
  }

  func generateWithLegacy(_ node: TypeSyntax) -> BridgedTypeRepr {
    legacyParse.parseType(self.generateSourceLoc(node), self.declContext)
  }

  func generateMatchingPatternWithLegacy(_ node: some PatternSyntaxProtocol) {
    //    legacyParse.parseMatchingPattern(self.bridgedSourceLoc(syntax: node), self.declContext)
  }

  func generateBindingPatternWithLegacy(_ node: some PatternSyntaxProtocol) {
    //    legacyParse.parseBindingPattern(self.bridgedSourceLoc(syntax: node), self.declContext)
  }
}
