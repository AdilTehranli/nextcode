//===--- LLVMNeXTCode.def ----------------------------------*- C++ -*---------===//
//
/*
 * Copyright (c) 2024, NeXTech Corporation. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * Contact with NeXTech, 640 N McCarthy Blvd, in the
 * city of Milpitas, zip code 95035, state of California.
 * or visit www.it-gss.com if you need additional information or have any
 * questions.
 */

// Author(-s): Tunjay Akbarli (tunjayakbarli@it-gss.com)
//
//===----------------------------------------------------------------------===//

// KIND(Name, MemBehavior)
//
// This represents a specific equivalence class of LLVM instructions that have a
// Name and the same MemBehavior from a ModRef perspective.
//
// Name - The name of the kind.
// MemBehavior - One of NoModRef or ModRef.
//
#ifndef KIND
#define KIND(Name, MemBehavior)
#endif

// NEXTCODE_FUNC(Name, MemBehavior, TextualName)
//
// This defines a special nextcode function known to the optimizer that may be
// present in either atomic or nonatomic form.
//
// Name - The name of the function
// MemBehavior - The MemBehavior of the instruction that can be known at compile time
// TextualName - The name of the function in the final binary.
#ifndef NEXTCODE_FUNC
#define NEXTCODE_FUNC(Name, MemBehavior, TextualName) KIND(Name, MemBehavior)
#endif

// NEXTCODE_NEVER_NONATOMIC_FUNC(Name, MemBehavior, TextualName)
//
// This defines a special nextcode function known to the optimizer that does not
// have a nonatomic form.
//
// Name - The name of the function
// MemBehavior - The MemBehavior of the instruction that can be known at compile time
// TextualName - The name of the function in the final binary.
#ifndef NEXTCODE_NEVER_NONATOMIC_FUNC
#define NEXTCODE_NEVER_NONATOMIC_FUNC(Name, MemBehavior, TextualName) NEXTCODE_FUNC(Name, MemBehavior, TextualName)
#endif

// NEXTCODE_INTERNAL_NEVER_NONATOMIC_FUNC(Name, MemBehavior, TextualName)
//
// This defines a special nextcode function known to the optimizer that does not
// have a nonatomic form and has an internal prefix (i.e. '__').
//
// Name - The name of the function
// MemBehavior - The MemBehavior of the instruction that can be known at compile time
// TextualName - The name of the function in the final binary.
#ifndef NEXTCODE_INTERNAL_FUNC_NEVER_NONATOMIC
#define NEXTCODE_INTERNAL_FUNC_NEVER_NONATOMIC(Name, MemBehavior, TextualName) NEXTCODE_FUNC(Name, MemBehavior, TextualName)
#endif

// OBJC_FUNC(Name, MemBehavior, TextualName)
//
// This defines a special objc function known to the optimizer that may have an
// atomic and nonatomic form.
//
// Name - The name of the function
// MemBehavior - The MemBehavior of the instruction that can be known at compile time
// TextualName - The name of the function in the final binary.
#ifndef OBJC_FUNC
#define OBJC_FUNC(Name, MemBehavior, TextualName) KIND(Name, MemBehavior)
#endif

/// An instruction with this classification is known to not access (read or
/// write) memory.
KIND(NoMemoryAccessed, NoModRef)

/// void nextcode_retain(NeXTCodeHeapObject *object)
NEXTCODE_FUNC(Retain, NoModRef, retain)

/// void nextcode_retain_n(NeXTCodeHeapObject *object)
NEXTCODE_FUNC(RetainN, NoModRef, retain_n)

/// void nextcode::nextcode_retainUnowned(HeapObject *object)
NEXTCODE_FUNC(RetainUnowned, NoModRef, retainUnowned)

/// void nextcode_checkUnowned(HeapObject *object)
NEXTCODE_FUNC(CheckUnowned, NoModRef, checkUnowned)

/// void nextcode_release(NeXTCodeHeapObject *object)
NEXTCODE_FUNC(Release, ModRef, release)

/// void nextcode_release_n(NeXTCodeHeapObject *object)
NEXTCODE_FUNC(ReleaseN, ModRef, release_n)

/// NeXTCodeHeapObject *nextcode_allocObject(NeXTCodeHeapMetadata *metadata,
///                                    size_t size, size_t alignment)
NEXTCODE_NEVER_NONATOMIC_FUNC(AllocObject, NoModRef, allocObject)

/// void objc_release(%objc_object* %P)
OBJC_FUNC(ObjCRelease, ModRef, release)

/// %objc_object* objc_retain(%objc_object* %P)
OBJC_FUNC(ObjCRetain, NoModRef, retain)

/// void nextcode_unknownObjectRetain(%nextcode.refcounted* %P)
NEXTCODE_FUNC(UnknownObjectRetain, NoModRef, unknownObjectRetain)

/// void nextcode_unknownObjectRetain_n(%nextcode.refcounted* %P)
NEXTCODE_FUNC(UnknownObjectRetainN, NoModRef, unknownObjectRetain_n)

/// void nextcode_unknownObjectRelease(%nextcode.refcounted* %P)
NEXTCODE_FUNC(UnknownObjectRelease, ModRef, unknownObjectRelease)

/// void nextcode_unknownObjectRelease_n(%nextcode.refcounted* %P)
NEXTCODE_FUNC(UnknownObjectReleaseN, ModRef, unknownObjectRelease_n)

/// void __nextcode_fixLifetime(%nextcode.refcounted* %P)
NEXTCODE_INTERNAL_FUNC_NEVER_NONATOMIC(FixLifetime, NoModRef, fixLifetime)

/// void nextcode_bridgeObjectRetain(%nextcode.refcounted* %P)
NEXTCODE_FUNC(BridgeRetain, NoModRef, bridgeObjectRetain)

/// void nextcode_bridgeObjectRetain_n(%nextcode.refcounted* %P)
NEXTCODE_FUNC(BridgeRetainN, NoModRef, bridgeObjectRetain_n)

/// void nextcode_bridgeObjectRelease(%nextcode.refcounted* %P)
NEXTCODE_FUNC(BridgeRelease, ModRef, bridgeObjectRelease)

/// void nextcode_bridgeObjectRelease_n(%nextcode.refcounted* %P)
NEXTCODE_FUNC(BridgeReleaseN, ModRef, bridgeObjectRelease_n)

/// borrow source is the value that was borrowed from. borrow_dest is the
/// borrowed ref.
///
/// TODO: We may want to communicate to the optimizer that this does not have
/// global effects.
///
/// void __nextcode_endBorrow(i8* %borrow_source, i8* %borrow_dest)
NEXTCODE_INTERNAL_FUNC_NEVER_NONATOMIC(EndBorrow, ModRef, endBorrow)

/// This is not a runtime function that we support.  Maybe it is not a call,
/// or is a call to something we don't care about.
KIND(Unknown, ModRef)

#undef NEXTCODE_INTERNAL_FUNC_NEVER_NONATOMIC
#undef NEXTCODE_NEVER_NONATOMIC_FUNC
#undef OBJC_FUNC
#undef NEXTCODE_FUNC
#undef KIND
