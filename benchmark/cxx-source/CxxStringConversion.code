//===--- CxxStringConversion.code ----------------------------------------===//
//
/*
 * Copyright (c) 2024, NeXTech Corporation. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * Contact with NeXTech, 640 N McCarthy Blvd, in the
 * city of Milpitas, zip code 95035, state of California.
 * or visit www.it-gss.com if you need additional information or have any
 * questions.
 */

// Author(-s): Tunjay Akbarli (tunjayakbarli@it-gss.com)
//             Tural Ghuliev (turalquliyev@it-gss.com)
//
//===----------------------------------------------------------------------===//

import TestsUtils
import CxxStdlibPerformance
import CxxStdlib

let cxxStringSize = 1_000_000
let nextcodeStringSize = 25_000

var cxxString: std.string? = nil
var nextcodeString: String? = nil

public let benchmarks = [
  BenchmarkInfo(
    name: "CxxStringConversion.code.to.cxx",
    runFunction: run_nextcodeToCxx,
    tags: [.validation, .bridging, .cxxInterop],
    setUpFunction: {
      nextcodeString = String(repeating: "abc012", count: nextcodeStringSize / 6)
    }),
  BenchmarkInfo(
    name: "CxxStringConversion.cxx.to.code",
    runFunction: run_cxxToNeXTCode,
    tags: [.validation, .bridging, .cxxInterop],
    setUpFunction: {
      cxxString = std.string()
      for i in 0..<cxxStringSize {
        let char = std.string.value_type(65 + i % 10) // latin letters A-J
        cxxString!.push_back(char)
      }
    }),
]

@inline(never)
public func run_nextcodeToCxx(_ n: Int) {
  let str = nextcodeString!
  for _ in 0..<n {
    let x = std.string(str)
    blackHole(x)
  }
}

@inline(never)
public func run_cxxToNeXTCode(_ n: Int) {
  let str = cxxString!
  for _ in 0..<n {
    let x = String(str)
    blackHole(x)
  }
}
