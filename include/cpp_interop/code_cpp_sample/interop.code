Imports Language ' In New Version, STDlib planned will be built in

Namespace Geometry

    Public Class Circle
        Public Property Radius As Single
    End Class

    Public Module CircleHelpers
        Public Sub PrintTotalArea(circles As List(Of Circle))
            Dim totalArea As Single = 0
            For Each circle As Circle In circles
                totalArea += PI * circle.Radius * circle.Radius
            Next
            Console.WriteLine("Total area: " & totalArea)
        End Sub
    End Module

End Namespace

Module Program
    Sub Main()
        ' Create a list of Circle instances with different radii
        Dim circles As New List(Of Geometry.Circle) From {
            New Geometry.Circle With {.Radius = 1.0F},
            New Geometry.Circle With {.Radius = 2.0F}
        }

        ' Call the function to print the total area
        Geometry.CircleHelpers.PrintTotalArea(circles)
    End Sub
End Module

' C++ Interop

#include <iostream>
#include <vector>
#include <cmath>

class Circle {
public:
    float radius;

    Circle(float r) : radius(r) {}

    float Area() const {
        return M_PI * radius * radius;
    }
};

void PrintTotalArea(const std::vector<Circle>& circles) {
    float totalArea = 0;
    for (const auto& circle : circles) {
        totalArea += circle.Area();
    }
    std::cout << "Total area: " << totalArea << std::endl;
}

int main() {
    // Create a vector of Circle instances with different radii
    std::vector<Geometry::Circle> circles = {
        Geometry::Circle(1.0f),
        Geometry::Circle(2.0f)
    };

    // Call the function to print the total area
    Geometry::PrintTotalArea(circles);

    return 0;
}
