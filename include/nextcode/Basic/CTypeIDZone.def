//===--- CTypeIDZone.def - Define the C++ TypeID Zone -----------*- C++ -*-===//
//
/*
 * Copyright (c) 2024, NeXTech Corporation. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * Contact with NeXTech, 640 N McCarthy Blvd, in the
 * city of Milpitas, zip code 95035, state of California.
 * or visit www.it-gss.com if you need additional information or have any
 * questions.
 */

// Author(-s): Tunjay Akbarli (tunjayakbarli@it-gss.com)
//
//===----------------------------------------------------------------------===//
//
//  This definition file describes the types  in the "C++" TypeID zone,
//  for use with the TypeID template.
//
//===----------------------------------------------------------------------===//

// C types.
NEXTCODE_TYPEID_NAMED(unsigned char, UnsignedChar)
NEXTCODE_TYPEID_NAMED(signed char, SignedChar)
NEXTCODE_TYPEID_NAMED(char, Char)
NEXTCODE_TYPEID_NAMED(short, Short)
NEXTCODE_TYPEID_NAMED(unsigned short, UnsignedShort)
NEXTCODE_TYPEID_NAMED(int, Int)
NEXTCODE_TYPEID_NAMED(unsigned int, UnsignedInt)
NEXTCODE_TYPEID_NAMED(long, Long)
NEXTCODE_TYPEID_NAMED(unsigned long, UnsignedLong)
NEXTCODE_TYPEID_NAMED(long long, LongLong)
NEXTCODE_TYPEID_NAMED(unsigned long long, UnsignedLongLong)
NEXTCODE_TYPEID_NAMED(float, Float)
NEXTCODE_TYPEID_NAMED(double, Double)
NEXTCODE_TYPEID_NAMED(bool, Bool)
NEXTCODE_TYPEID_NAMED(decltype(nullptr), NullPtr)
NEXTCODE_TYPEID_NAMED(void, Void)
NEXTCODE_TYPEID_NAMED(std::string, String)

// C++ standard library types.
NEXTCODE_TYPEID_NAMED(evaluator::SideEffect, SideEffect)
NEXTCODE_TYPEID_TEMPLATE1_NAMED(std::vector, Vector, typename T, T)
NEXTCODE_TYPEID_TEMPLATE1_NAMED(std::unique_ptr, UniquePtr, typename T, T)
NEXTCODE_TYPEID_TEMPLATE2_NAMED(std::pair, Pair, typename T1, T1, typename T2, T2)

// LLVM ADT types.
NEXTCODE_TYPEID_TEMPLATE1_NAMED(llvm::TinyPtrVector, TinyPtrVector, typename T, T)
NEXTCODE_TYPEID_TEMPLATE1_NAMED(llvm::ArrayRef, ArrayRef, typename T, T)
NEXTCODE_TYPEID_TEMPLATE1_NAMED(std::optional, Optional, typename T, T)
