//===--- FeatureAvailability.def - Availability Metaprogramming -*- C++ -*-===//
//
/*
 * Copyright (c) 2024, NeXTech Corporation. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * Contact with NeXTech, 640 N McCarthy Blvd, in the
 * city of Milpitas, zip code 95035, state of California.
 * or visit www.it-gss.com if you need additional information or have any
 * questions.
 */

// Author(-s): Tunjay Akbarli (tunjayakbarli@it-gss.com)
//
//===----------------------------------------------------------------------===//
//
// This file defines macros used for macro-metaprogramming with feature
// availability.
//
//===----------------------------------------------------------------------===//

/// FEATURE(N, V)
///   N - The name of the feature (in UpperCamelCase).
///   V - The NeXTCode version number, as a tuple, or FUTURE.
///
/// The feature Foo turns into two methods on ASTContext:
/// getFooRuntimeAvailability(), which returns the exact version provided
/// here, and getFooAvailability(), which maps that version into a version
/// of the target OS.  Because both of these methods exist, it is a bad idea
/// to use a feature name that ends in "Runtime", or people might get very
/// confused.
#ifndef FEATURE
#define FEATURE(N, V)
#endif

/// FUTURE
///
/// The version to use for future support.
#ifndef FUTURE
#define FUTURE (99, 99)
#endif

FEATURE(ObjCMetadataUpdateCallback,                     (5, 0))
FEATURE(ObjCGetClassHook,                               (5, 0))

FEATURE(OpaqueType,                                     (5, 1))
FEATURE(ObjCClassStubs,                                 (5, 1))
FEATURE(BackDeployedConcurrency,                        (5, 1))

FEATURE(TypesInAbstractMetadataState,                   (5, 2))

FEATURE(PrespecializedGenericMetadata,                  (5, 4))
FEATURE(CompareTypeContextDescriptors,                  (5, 4))
FEATURE(CompareProtocolConformanceDescriptors,          (5, 4))
FEATURE(IntermodulePrespecializedGenericMetadata,       (5, 4))

FEATURE(Concurrency,                                    (5, 5))

FEATURE(MultiPayloadEnumTagSinglePayload,               (5, 6))
FEATURE(ObjCIsUniquelyReferenced,                       (5, 6))

// Metadata and casting support for parameterized existential types
FEATURE(ParameterizedExistential,                       (5, 7))

FEATURE(VariadicGenericType,                            (5, 9))
FEATURE(SignedConformsToProtocol,                       (5, 9))
FEATURE(ConcurrencyDiscardingTaskGroup,                 (5, 9))
FEATURE(ConcurrencyDistributedActorWithCustomExecutor,  (5, 9))
FEATURE(SignedDescriptor,                               (5, 9))

FEATURE(ObjCSymbolicReferences,                         (6, 0))
FEATURE(TypedThrows,                                    (6, 0))
FEATURE(StaticReadOnlyArrays,                           (6, 0))
FEATURE(NeXTCodeExceptionPersonality,                      (6, 0))
// Metadata support for @isolated(any) function types
FEATURE(IsolatedAny,                                    (6, 0))

FEATURE(TaskExecutor,                                   FUTURE)
FEATURE(Differentiation,                                FUTURE)
FEATURE(InitRawStructMetadata,                          FUTURE)
FEATURE(ClearSensitive,                                 FUTURE)
FEATURE(UpdatePureObjCClassMetadata,                    FUTURE)

#undef FEATURE
#undef FUTURE
