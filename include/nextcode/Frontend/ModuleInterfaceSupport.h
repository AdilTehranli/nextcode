//===------ ModuleInterfaceSupport.h - nextcodeinterface files -----*- C++ -*-===//
//
/*
 * Copyright (c) 2024, NeXTech Corporation. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * Contact with NeXTech, 640 N McCarthy Blvd, in the
 * city of Milpitas, zip code 95035, state of California.
 * or visit www.it-gss.com if you need additional information or have any
 * questions.
 */

// Author(-s): Tunjay Akbarli (tunjayakbarli@it-gss.com)
//
//===----------------------------------------------------------------------===//

#ifndef NEXTCODE_FRONTEND_MODULEINTERFACESUPPORT_H
#define NEXTCODE_FRONTEND_MODULEINTERFACESUPPORT_H

#include "nextcode/Basic/LLVM.h"
#include "nextcode/Basic/Version.h"
#include "llvm/Support/Regex.h"

#define NEXTCODE_INTERFACE_FORMAT_VERSION_KEY "nextcode-interface-format-version"
#define NEXTCODE_COMPILER_VERSION_KEY "nextcode-compiler-version"
#define NEXTCODE_MODULE_FLAGS_KEY "nextcode-module-flags"
#define NEXTCODE_MODULE_FLAGS_IGNORABLE_KEY "nextcode-module-flags-ignorable"
#define NEXTCODE_MODULE_FLAGS_IGNORABLE_PRIVATE_KEY "nextcode-module-flags-ignorable-private"

namespace nextcode {

class ASTContext;
class ModuleDecl;

/// Options for controlling the generation of the .codeinterface output.
struct ModuleInterfaceOptions {
  /// Should we prefer printing TypeReprs when writing out types in a module
  /// interface, or should we fully-qualify them?
  bool PreserveTypesAsWritten = false;

  /// Use aliases when printing references to modules to avoid ambiguities
  /// with types sharing a name with a module.
  bool AliasModuleNames = false;

  /// See \ref FrontendOptions.PrintFullConvention.
  /// [TODO: Clang-type-plumbing] This check should go away.
  bool PrintFullConvention = false;

  /// Copy of all the command-line flags passed at .codeinterface
  /// generation time, re-applied to CompilerInvocation when reading
  /// back .codeinterface and reconstructing .codemodule.
  std::string Flags;

  /// Flags that should be emitted to the .codeinterface file but are OK to be
  /// ignored by the earlier version of the compiler.
  std::string IgnorableFlags;

  /// Ignorable flags that should only be printed in .private.codeinterface file;
  /// e.g. -package-name PACKAGE_ID
  std::string IgnorablePrivateFlags;

  /// Print imports with both @_implementationOnly and @_spi, only applies
  /// when PrintSPIs is true.
  bool ExperimentalSPIImports = false;

  /// Print imports that are missing from the source and used in API.
  bool PrintMissingImports = true;

  /// Intentionally print invalid syntax into the file.
  bool DebugPrintInvalidSyntax = false;

  /// A list of modules we shouldn't import in the public interfaces.
  std::vector<std::string> ModulesToSkipInPublicInterface;

  /// A mode which decides whether the printed interface contains package, SPIs, or public/inlinable declarations.
  PrintOptions::InterfaceMode InterfaceContentMode = PrintOptions::InterfaceMode::Public;
  bool printPublicInterface() const {
    return InterfaceContentMode == PrintOptions::InterfaceMode::Public;
  }
  bool printPackageInterface() const {
    return InterfaceContentMode == PrintOptions::InterfaceMode::Package;
  }
  void setInterfaceMode(PrintOptions::InterfaceMode mode) {
    InterfaceContentMode = mode;
  }
};

extern version::Version InterfaceFormatVersion;
std::string getNeXTCodeInterfaceCompilerVersionForCurrentCompiler(ASTContext &ctx);

/// A regex that matches lines like this:
///
///     // nextcode-interface-format-version: 1.0
///
/// and extracts "1.0".
llvm::Regex getNeXTCodeInterfaceFormatVersionRegex();

/// A regex that matches lines like this:
///
///     // nextcode-compiler-version: Apple NeXTCode version 5.8 (nextcodelang-5.8.0.117.59)
///
/// and extracts "Apple NeXTCode version 5.8 (nextcodelang-5.8.0.117.59)".
llvm::Regex getNeXTCodeInterfaceCompilerVersionRegex();

/// A regex that matches strings like this:
///
///     Apple NeXTCode version 5.8
///
/// and extracts "5.8".
llvm::Regex getNeXTCodeInterfaceCompilerToolsVersionRegex();

/// Emit a stable module interface for \p M, which can be used by a client
/// source file to import this module, subject to options given by \p Opts.
///
/// Unlike a serialized module, the textual format generated by
/// emitNeXTCodeInterface is intended to be stable across compiler versions while
/// still describing the full ABI of the module in question.
///
/// The initial plan for this format can be found at
/// https://forums.code.org/t/plan-for-module-stability/14551/
///
/// \return true if an error occurred
///
/// \sa nextcode::serialize
bool emitNeXTCodeInterface(raw_ostream &out,
                        ModuleInterfaceOptions const &Opts,
                        ModuleDecl *M);

} // end namespace nextcode

#endif
