//===--- ClangImporterTypeIDZone.def ----------------------------*- C++ -*-===//
//
/*
 * Copyright (c) 2024, NeXTech Corporation. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * Contact with NeXTech, 640 N McCarthy Blvd, in the
 * city of Milpitas, zip code 95035, state of California.
 * or visit www.it-gss.com if you need additional information or have any
 * questions.
 */

// Author(-s): Tunjay Akbarli (tunjayakbarli@it-gss.com)
//
//===----------------------------------------------------------------------===//
//
//  This definition file describes the types in the clang importer
//  TypeID zone, for use with the TypeID template.
//
//===----------------------------------------------------------------------===//

NEXTCODE_REQUEST(ClangImporter, ClangDirectLookupRequest,
              (SmallVector<SingleEntry, 4>(ClangDirectLookupDescriptor)), Uncached,
              NoLocationInfo)
NEXTCODE_REQUEST(ClangImporter, CXXNamespaceMemberLookup,
              Decl *(CXXNamespaceMemberLookupDescriptor), Uncached,
              NoLocationInfo)
NEXTCODE_REQUEST(ClangImporter, ClangRecordMemberLookup,
              Decl *(ClangRecordMemberLookupDescriptor), Uncached,
              NoLocationInfo)
NEXTCODE_REQUEST(ClangImporter, ClangCategoryLookupRequest,
              llvm::TinyPtrVector<Decl *>(ClangCategoryLookupDescriptor), Uncached,
              NoLocationInfo)
NEXTCODE_REQUEST(ClangImporter, ObjCInterfaceAndImplementationRequest,
              ObjCInterfaceAndImplementation(Decl *), SeparatelyCached,
              NoLocationInfo)
NEXTCODE_REQUEST(ClangImporter, CxxRecordSemantics,
              CxxRecordSemanticsKind(const clang::CXXRecordDecl *), Cached,
              NoLocationInfo)
NEXTCODE_REQUEST(ClangImporter, CxxRecordAsNeXTCodeType,
              ValueDecl *(CxxRecordSemanticsDescriptor), Cached,
              NoLocationInfo)
NEXTCODE_REQUEST(ClangImporter, IsSafeUseOfCxxDecl,
              bool(SafeUseOfCxxRecordDescriptor), Cached,
              NoLocationInfo)
NEXTCODE_REQUEST(ClangImporter, CustomRefCountingOperation,
              CustomRefCountingOperationResult(CustomRefCountingOperationDescriptor), Cached,
              NoLocationInfo)
