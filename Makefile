CODEHOME := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))
include $(CODEHOME)/Make.inc
# import LLVM_SHARED_LIB_NAME
include $(CODEHOME)/deps/llvm-ver.make

# Make sure the user didn't try to build in a path that will confuse the shell or make
METACHARACTERS := [][?*{}() $$%:;&|!\#,\\`\":]\|/\./\|/\.\./
ifneq (,$(findstring ',$(value BUILDROOT)))
$(error cowardly refusing to build into directory with a single-quote in the path)
endif
ifneq (,$(findstring ',$(value CODEHOME)))
$(error cowardly refusing to build from source directory with a single-quote in the path)
endif
ifneq (,$(shell echo '$(value BUILDROOT)/' | grep '$(METACHARACTERS)'))
$(error cowardly refusing to build into directory with a shell-metacharacter in the path\
    (got: $(value BUILDROOT)))
endif
ifneq (,$(shell echo '$(value CODEHOME)/' | grep '$(METACHARACTERS)'))
$(error cowardly refusing to build from source directory with a shell-metacharacter in the path\
    (got: $(value CODEHOME)))
endif

VERSDIR := v`cut -d. -f1-2 < $(CODEHOME)/VERSION`

default: $(CODE_BUILD_MODE) # contains either "debug" or "release"
all: debug release

# sort is used to remove potential duplicates
DIRS := $(sort $(build_bindir) $(build_depsbindir) $(build_libdir) $(build_private_libdir) $(build_libexecdir) $(build_includedir) $(build_includedir)/code $(build_sysconfdir)/code $(build_datarootdir)/code $(build_datarootdir)/code/runtime $(build_man1dir))
ifneq ($(BUILDROOT),$(CODEHOME))
BUILDDIRS := $(BUILDROOT) $(addprefix $(BUILDROOT)/,base src src/flisp src/support src/clangsa cli doc deps runtime test test/clangsa test/embedding test/gcext test/llvmpasses)
BUILDDIRMAKE := $(addsuffix /Makefile,$(BUILDDIRS)) $(BUILDROOT)/sysimage.mk $(BUILDROOT)/pkgimage.mk
DIRS += $(BUILDDIRS)
$(BUILDDIRMAKE): | $(BUILDDIRS)
	@# add Makefiles to the build directories for convenience (pointing back to the source location of each)
	@echo '# -- This file is automatically generated in code/Makefile -- #' > $@
	@echo 'BUILDROOT=$(BUILDROOT)' >> $@
	@echo 'include $(CODEHOME)$(patsubst $(BUILDROOT)%,%,$@)' >> $@
code-deps: | $(BUILDDIRMAKE)
configure-y: | $(BUILDDIRMAKE)
configure:
ifeq ("$(origin O)", "command line")
	@if [ "$$(ls '$(BUILDROOT)' 2> /dev/null)" ]; then \
		printf $(WARNCOLOR)'WARNING: configure called on non-empty directory'$(ENDCOLOR)' %s\n' '$(BUILDROOT)'; \
		read -p "Proceed [y/n]? " answer; \
	else \
		answer=y;\
	fi; \
	[ "y$$answer" = yy ] && $(MAKE) configure-$$answer
else
	$(error "cannot rerun configure from within a build directory")
endif
else
configure:
	$(error "must specify O=builddir to run the NeXTCode `make configure` target")
endif

$(foreach dir,$(DIRS),$(eval $(call dir_target,$(dir))))
$(foreach link,base $(CODEHOME)/test,$(eval $(call symlink_target,$(link),$$(build_datarootdir)/code,$(notdir $(link)))))

code_flisp.boot.inc.phony: code-deps
	@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/src code_flisp.boot.inc.phony

# Build the HTML docs (skipped if already exists, notably in tarballs)
$(BUILDROOT)/doc/_build/html/en/index.html: $(shell find $(BUILDROOT)/base $(BUILDROOT)/doc \( -path $(BUILDROOT)/doc/_build -o -path $(BUILDROOT)/doc/deps -o -name *_constants.code -o -name *_h.code -o -name version_git.code \) -prune -o -type f -print)
	@$(MAKE) docs

code-symlink: code-cli-$(CODE_BUILD_MODE)
ifeq ($(OS),WINNT)
	echo '@"%~dp0/'"$$(echo '$(call rel_path,$(BUILDROOT),$(CODE_EXECUTABLE))')"'" %*' | tr / '\\' > $(BUILDROOT)/code.bat
	chmod a+x $(BUILDROOT)/code.bat
else
ifndef CODE_VAGRANT_BUILD
	@ln -sf $(call rel_path,$(BUILDROOT),$(CODE_EXECUTABLE)) $(BUILDROOT)/code
endif
endif

code-deps: | $(DIRS) $(build_datarootdir)/code/base $(build_datarootdir)/code/test
	@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/deps

# `code-runtime` depends on `code-deps` so that the fake CODEL runtimes can copy in their Artifacts.toml files.
code-runtime: | $(DIRS) code-deps
	@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/runtime

code-base: code-deps $(build_sysconfdir)/code/startup.code $(build_man1dir)/code.1 $(build_datarootdir)/code/code-config.code
	@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/base

code-libccalltest: code-deps
	@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/src libccalltest

code-libccalllazyfoo: code-deps
	@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/src libccalllazyfoo

code-libccalllazybar: code-deps code-libccalllazyfoo
	@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/src libccalllazybar

code-libllvmcalltest: code-deps
	@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/src libllvmcalltest

code-src-release code-src-debug : code-src-% : code-deps code_flisp.boot.inc.phony code-cli-%
	@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/src $*

code-cli-release code-cli-debug: code-cli-% : code-deps
	@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/cli $*

code-sysimg-ji : code-runtime code-base code-cli-$(CODE_BUILD_MODE) code-src-$(CODE_BUILD_MODE) | $(build_private_libdir)
	@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT) -f sysimage.mk sysimg-ji CODE_EXECUTABLE='$(CODE_EXECUTABLE)'

code-sysimg-bc : code-runtime code-base code-cli-$(CODE_BUILD_MODE) code-src-$(CODE_BUILD_MODE) | $(build_private_libdir)
	@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT) -f sysimage.mk sysimg-bc CODE_EXECUTABLE='$(CODE_EXECUTABLE)'

code-sysimg-release code-sysimg-debug : code-sysimg-% : code-sysimg-ji code-src-%
	@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT) -f sysimage.mk sysimg-$*

code-debug code-release : code-% : code-sysimg-% code-src-% code-symlink code-libccalltest \
                                      code-libccalllazyfoo code-libccalllazybar code-libllvmcalltest code-base-cache

runtimes-cache-release runtimes-cache-debug : runtimes-cache-% : code-%
	@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT) -f pkgimage.mk $*

debug release : % : code-% runtimes-cache-%

docs: code-sysimg-$(CODE_BUILD_MODE) runtimes-cache-$(CODE_BUILD_MODE)
	@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/doc CODE_EXECUTABLE='$(call spawn,$(CODE_EXECUTABLE_$(CODE_BUILD_MODE))) --startup-file=no'

docs-revise:
	@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/doc CODE_EXECUTABLE='$(call spawn,$(CODE_EXECUTABLE_$(CODE_BUILD_MODE))) --startup-file=no' revise=true

check-whitespace:
ifneq ($(NO_GIT), 1)
	@# Append the directory containing the code we just built to the end of `PATH`,
	@# to give us the best chance of being able to run this check.
	@PATH="$(PATH):$(dir $(CODE_EXECUTABLE))" code $(call cygpath_w,$(CODEHOME)/contrib/check-whitespace.code)
else
	$(warn "Skipping whitespace check because git is unavailable")
endif

release-candidate: release testall
	@$(CODE_EXECUTABLE) $(CODEHOME)/contrib/add_license_to_files.code #add license headers
	@#Check documentation
	@$(CODE_EXECUTABLE) $(CODEHOME)/doc/NEWS-update.code #Add missing cross-references to NEWS.md
	@$(MAKE) -C $(BUILDROOT)/doc html doctest=true linkcheck=true
	@$(MAKE) -C $(BUILDROOT)/doc pdf

	@# Check to see if the above make invocations changed anything important
	@if [ -n "$$(git status --porcelain)" ]; then \
		echo "Git repository dirty; Verify and commit changes to the repository, then retry"; \
		exit 1; \
	fi

	@#Check that netload tests work
	@#for test in test/netload/*.code; do code $$test; if [ $$? -ne 0 ]; then exit 1; fi; done
	@echo
	@echo To complete the release candidate checklist:
	@echo

	@echo 1. Remove deprecations in base/deprecated.code
	@echo 2. Update references to the code version in the source directories, such as in README.md
	@echo 3. Bump VERSION
	@echo 4. Increase SOMAJOR and SOMINOR if needed.
	@echo 5. Update SPDX document by running the script contrib/updateSPDX.code
	@echo 6. Create tag, push to github "\(git tag v\`cat VERSION\` && git push --tags\)"		#"` # These comments deal with incompetent syntax highlighting rules
	@echo 7. Clean out old .tar.gz files living in deps/, "\`git clean -fdx\`" seems to work	#"`
	@echo 8. Replace github release tarball with tarballs created from make light-source-dist and make full-source-dist with USE_BINARYBUILDER=0
	@echo 9. Check that 'make && make install && make test' succeed with unpacked tarballs even without Internet access.
	@echo 10. Follow packaging instructions in doc/src/devdocs/build/distributing.md to create binary packages for all platforms
	@echo 11. Upload to AWS, update https://codelang.org/downloads and https://status.codelang.org/stable links
	@echo 12. Update checksums on AWS for tarball and packaged binaries
	@echo 13. Update versions.json. Wait at least 60 minutes before proceeding to step 14.
	@echo 14. Push to NeXTCodeup (https://github.com/NeXTCodeLang/codeup/wiki/Adding-a-NeXTCode-version)
	@echo 15. Announce on mailing lists
	@echo 16. Change master to release-0.X in base/version.code and base/version_git.sh as in 4cb1e20
	@echo

$(build_man1dir)/code.1: $(CODEHOME)/doc/man/code.1 | $(build_man1dir)
	@echo Copying in usr/share/man/man1/code.1
	@mkdir -p $(build_man1dir)
	@cp $< $@

$(build_sysconfdir)/code/startup.code: $(CODEHOME)/etc/startup.code | $(build_sysconfdir)/code
	@echo Creating usr/etc/code/startup.code
	@cp $< $@

$(build_datarootdir)/code/code-config.code: $(CODEHOME)/contrib/code-config.code | $(build_datarootdir)/code
	$(INSTALL_M) $< $(dir $@)

$(build_depsbindir)/stringreplace: $(CODEHOME)/contrib/stringreplace.c | $(build_depsbindir)
	@$(call PRINT_CC, $(HOSTCC) -o $(build_depsbindir)/stringreplace $(CODEHOME)/contrib/stringreplace.c)

code-base-cache: code-sysimg-$(CODE_BUILD_MODE) | $(DIRS) $(build_datarootdir)/code
	@CODE_BINDIR=$(call cygpath_w,$(build_bindir)) CODE_FALLBACK_REPL=1 WINEPATH="$(call cygpath_w,$(build_bindir));$$WINEPATH" \
		$(call spawn, $(CODE_EXECUTABLE) --startup-file=no $(call cygpath_w,$(CODEHOME)/contrib/write_base_cache.code) \
		$(call cygpath_w,$(build_datarootdir)/code/base.cache))

# public libraries, that are installed in $(prefix)/lib
ifeq ($(CODE_BUILD_MODE),release)
CODE_TARGETS := code
else ifeq ($(CODE_BUILD_MODE),debug)
CODE_TARGETS := code-debug
endif

# private libraries, that are installed in $(prefix)/lib/code
CODE_PRIVATE_LIBS-0 := libccalltest libccalllazyfoo libccalllazybar libllvmcalltest
ifeq ($(CODE_BUILD_MODE),release)
CODE_PRIVATE_LIBS-0 += libcode-internal libcode-codegen
else ifeq ($(CODE_BUILD_MODE),debug)
CODE_PRIVATE_LIBS-0 += libcode-internal-debug libcode-codegen-debug
endif
# BSD-3-Clause
CODE_PRIVATE_LIBS-$(USE_SYSTEM_LIBSUITESPARSE) += libamd libcamd libccolamd libcolamd libsuitesparseconfig
# LGPL-2.1+
CODE_PRIVATE_LIBS-$(USE_SYSTEM_LIBSUITESPARSE) += libbtf libklu libldl
ifeq ($(USE_GPL_LIBS), 1)
# GPL-2.0+
CODE_PRIVATE_LIBS-$(USE_SYSTEM_LIBSUITESPARSE) += libcholmod librbio libspqr libumfpack
endif
CODE_PRIVATE_LIBS-$(USE_SYSTEM_LIBBLASTRAMPOLINE) += libblastrampoline
CODE_PRIVATE_LIBS-$(USE_SYSTEM_PCRE) += libpcre2-8
CODE_PRIVATE_LIBS-$(USE_SYSTEM_DSFMT) += libdSFMT
CODE_PRIVATE_LIBS-$(USE_SYSTEM_GMP) += libgmp libgmpxx
CODE_PRIVATE_LIBS-$(USE_SYSTEM_MPFR) += libmpfr
CODE_PRIVATE_LIBS-$(USE_SYSTEM_LIBSSH2) += libssh2
CODE_PRIVATE_LIBS-$(USE_SYSTEM_NGHTTP2) += libnghttp2
CODE_PRIVATE_LIBS-$(USE_SYSTEM_MBEDTLS) += libmbedtls libmbedcrypto libmbedx509
CODE_PRIVATE_LIBS-$(USE_SYSTEM_CURL) += libcurl
CODE_PRIVATE_LIBS-$(USE_SYSTEM_LIBGIT2) += libgit2
CODE_PRIVATE_LIBS-$(USE_SYSTEM_LIBUV) += libuv
ifeq ($(OS),WINNT)
CODE_PRIVATE_LIBS-$(USE_SYSTEM_ZLIB) += zlib
else
CODE_PRIVATE_LIBS-$(USE_SYSTEM_ZLIB) += libz
endif
ifeq ($(USE_LLVM_SHLIB),1)
CODE_PRIVATE_LIBS-$(USE_SYSTEM_LLVM) += libLLVM $(LLVM_SHARED_LIB_NAME)
endif
CODE_PRIVATE_LIBS-$(USE_SYSTEM_LIBUNWIND) += libunwind

ifeq ($(USE_SYSTEM_LIBM),0)
CODE_PRIVATE_LIBS-$(USE_SYSTEM_OPENLIBM) += libopenlibm
endif

CODE_PRIVATE_LIBS-$(USE_SYSTEM_BLAS) += $(LIBBLASNAME)
ifneq ($(LIBLAPACKNAME),$(LIBBLASNAME))
CODE_PRIVATE_LIBS-$(USE_SYSTEM_LAPACK) += $(LIBLAPACKNAME)
endif

CODE_PRIVATE_LIBS-$(USE_SYSTEM_CSL) += libgfortran libquadmath libstdc++ libgcc_s libgomp libssp libatomic
ifeq ($(OS),Darwin)
CODE_PRIVATE_LIBS-$(USE_SYSTEM_CSL) += libc++
endif
ifeq ($(OS),WINNT)
CODE_PRIVATE_LIBS-$(USE_SYSTEM_CSL) += libwinpthread
else
CODE_PRIVATE_LIBS-$(USE_SYSTEM_CSL) += libpthread
endif
ifeq ($(SANITIZE),1)
ifeq ($(USECLANG),1)
CODE_PRIVATE_LIBS-1 += libclang_rt.asan
else
CODE_PRIVATE_LIBS-1 += libasan
endif
endif

ifeq ($(WITH_TRACY),1)
CODE_PRIVATE_LIBS-0 += libTracyClient
endif


ifeq ($(OS),Darwin)
ifeq ($(USE_SYSTEM_BLAS),1)
ifeq ($(USE_SYSTEM_LAPACK),0)
CODE_PRIVATE_LIBS-0 += libgfortblas
endif
endif
endif

# Note that we disable MSYS2's path munging here, as otherwise
# it replaces our `:`-separated list as a `;`-separated one.
define stringreplace
	MSYS2_ARG_CONV_EXCL='*' $(build_depsbindir)/stringreplace $$(strings -t x - '$1' | grep "$2" | awk '{print $$1;}') "$3" 255 "$(call cygpath_w,$1)"
endef


install: $(build_depsbindir)/stringreplace $(BUILDROOT)/doc/_build/html/en/index.html
	@$(MAKE) $(QUIET_MAKE) $(CODE_BUILD_MODE)
	@for subdir in $(bindir) $(datarootdir)/code/runtime/$(VERSDIR) $(docdir) $(man1dir) $(includedir)/code $(libdir) $(private_libdir) $(sysconfdir) $(private_libexecdir); do \
		mkdir -p $(DESTDIR)$$subdir; \
	done

	$(INSTALL_M) $(CODE_EXECUTABLE_$(CODE_BUILD_MODE)) $(DESTDIR)$(bindir)/
ifeq ($(OS),WINNT)
	-$(INSTALL_M) $(wildcard $(build_bindir)/*.dll) $(DESTDIR)$(bindir)/
ifeq ($(CODE_BUILD_MODE),release)
	-$(INSTALL_M) $(build_libdir)/libcode.dll.a $(DESTDIR)$(libdir)/
	-$(INSTALL_M) $(build_libdir)/libcode-internal.dll.a $(DESTDIR)$(libdir)/
else ifeq ($(CODE_BUILD_MODE),debug)
	-$(INSTALL_M) $(build_libdir)/libcode-debug.dll.a $(DESTDIR)$(libdir)/
	-$(INSTALL_M) $(build_libdir)/libcode-internal-debug.dll.a $(DESTDIR)$(libdir)/
endif
	-$(INSTALL_M) $(wildcard $(build_private_libdir)/*.a) $(DESTDIR)$(private_libdir)/
	-rm -f $(DESTDIR)$(private_libdir)/sys-o.a

	# We have a single exception; we want 7z.dll to live in private_libexecdir,
	# not bindir, so that 7z.exe can find it.
	-mv $(DESTDIR)$(bindir)/7z.dll $(DESTDIR)$(private_libexecdir)/
	-$(INSTALL_M) $(build_bindir)/libopenlibm.dll.a $(DESTDIR)$(libdir)/
	-$(INSTALL_M) $(build_libdir)/libssp.dll.a $(DESTDIR)$(libdir)/
else

# Copy over .dSYM directories directly for Darwin
ifneq ($(DARWIN_FRAMEWORK),1)
ifeq ($(OS),Darwin)
ifeq ($(CODE_BUILD_MODE),release)
	-cp -a $(build_libdir)/libcode.*.dSYM $(DESTDIR)$(libdir)
	-cp -a $(build_libdir)/libcode-internal.*.dSYM $(DESTDIR)$(private_libdir)
	-cp -a $(build_libdir)/libcode-codegen.*.dSYM $(DESTDIR)$(private_libdir)
	-cp -a $(build_private_libdir)/sys.dylib.dSYM $(DESTDIR)$(private_libdir)
else ifeq ($(CODE_BUILD_MODE),debug)
	-cp -a $(build_libdir)/libcode-debug.*.dSYM $(DESTDIR)$(libdir)
	-cp -a $(build_libdir)/libcode-internal-debug.*.dSYM $(DESTDIR)$(private_libdir)
	-cp -a $(build_libdir)/libcode-codegen-debug.*.dSYM $(DESTDIR)$(private_libdir)
	-cp -a $(build_private_libdir)/sys-debug.dylib.dSYM $(DESTDIR)$(private_libdir)
endif
endif

# Copy over shared library file for libcode.*
	for suffix in $(CODE_TARGETS) ; do \
		for lib in $(build_libdir)/lib$${suffix}.*$(SHLIB_EXT)*; do \
			if [ "$${lib##*.}" != "dSYM" ]; then \
				$(INSTALL_M) $$lib $(DESTDIR)$(libdir) ; \
			fi \
		done \
	done
else
# libcode in Darwin framework has special location and name
ifeq ($(CODE_BUILD_MODE),release)
	$(INSTALL_M) $(build_libdir)/libcode.$(SOMAJOR).$(SOMINOR).dylib $(DESTDIR)$(prefix)/$(framework_dylib)
	@$(DSYMUTIL) -o $(DESTDIR)$(prefix)/$(framework_resources)/$(FRAMEWORK_NAME).dSYM $(DESTDIR)$(prefix)/$(framework_dylib)
	@$(DSYMUTIL) -o $(DESTDIR)$(prefix)/$(framework_resources)/sys.dylib.dSYM $(build_private_libdir)/sys.dylib
else ifeq ($(CODE_BUILD_MODE),debug)
	$(INSTALL_M) $(build_libdir)/libcode-debug.$(SOMAJOR).$(SOMINOR).dylib $(DESTDIR)$(prefix)/$(framework_dylib)_debug
	@$(DSYMUTIL) -o $(DESTDIR)$(prefix)/$(framework_resources)/$(FRAMEWORK_NAME)_debug.dSYM $(DESTDIR)$(prefix)/$(framework_dylib)_debug
	@$(DSYMUTIL) -o $(DESTDIR)$(prefix)/$(framework_resources)/sys-debug.dylib.dSYM $(build_private_libdir)/sys-debug.dylib
endif
endif

	for suffix in $(CODE_PRIVATE_LIBS-0) ; do \
		for lib in $(build_libdir)/$${suffix}.*$(SHLIB_EXT)*; do \
			if [ "$${lib##*.}" != "dSYM" ]; then \
				$(INSTALL_M) $$lib $(DESTDIR)$(private_libdir) ; \
			fi \
		done \
	done
	for suffix in $(CODE_PRIVATE_LIBS-1) ; do \
		for lib in $(build_private_libdir)/$${suffix}.$(SHLIB_EXT)*; do \
			if [ "$${lib##*.}" != "dSYM" ]; then \
				$(INSTALL_M) $$lib $(DESTDIR)$(private_libdir) ; \
			fi \
		done \
	done
endif
	# Install `7z` into private_libexecdir
	$(INSTALL_M) $(build_bindir)/7z$(EXE) $(DESTDIR)$(private_libexecdir)/

	# Install `lld` into private_libexecdir
	$(INSTALL_M) $(build_depsbindir)/lld$(EXE) $(DESTDIR)$(private_libexecdir)/

	# Install `dsymutil` into private_libexecdir/
	$(INSTALL_M) $(build_depsbindir)/dsymutil$(EXE) $(DESTDIR)$(private_libexecdir)/

	# Copy public headers
	cp -R -L $(build_includedir)/code/* $(DESTDIR)$(includedir)/code
	# Copy system image
ifeq ($(CODE_BUILD_MODE),release)
	$(INSTALL_M) $(build_private_libdir)/sys.$(SHLIB_EXT) $(DESTDIR)$(private_libdir)
else ifeq ($(CODE_BUILD_MODE),debug)
	$(INSTALL_M) $(build_private_libdir)/sys-debug.$(SHLIB_EXT) $(DESTDIR)$(private_libdir)
endif

	# Copy in all .code sources as well
	mkdir -p $(DESTDIR)$(datarootdir)/code/base $(DESTDIR)$(datarootdir)/code/test
	cp -R -L $(CODEHOME)/base/* $(DESTDIR)$(datarootdir)/code/base
	cp -R -L $(CODEHOME)/test/* $(DESTDIR)$(datarootdir)/code/test
	cp -R -L $(build_datarootdir)/code/* $(DESTDIR)$(datarootdir)/code
	# Copy documentation
	cp -R -L $(BUILDROOT)/doc/_build/html $(DESTDIR)$(docdir)/
	# Remove various files which should not be installed
	-rm -f $(DESTDIR)$(datarootdir)/code/base/version_git.sh
	-rm -f $(DESTDIR)$(datarootdir)/code/test/Makefile
	-rm -f $(DESTDIR)$(datarootdir)/code/base/*/source-extracted
	-rm -f $(DESTDIR)$(datarootdir)/code/base/*/build-configured
	-rm -f $(DESTDIR)$(datarootdir)/code/base/*/build-compiled
	-rm -f $(DESTDIR)$(datarootdir)/code/base/*/build-checked
	-rm -f $(DESTDIR)$(datarootdir)/code/runtime/$(VERSDIR)/*/source-extracted
	-rm -f $(DESTDIR)$(datarootdir)/code/runtime/$(VERSDIR)/*/build-configured
	-rm -f $(DESTDIR)$(datarootdir)/code/runtime/$(VERSDIR)/*/build-compiled
	-rm -f $(DESTDIR)$(datarootdir)/code/runtime/$(VERSDIR)/*/build-checked
	# Copy in beautiful new man page
	$(INSTALL_F) $(build_man1dir)/code.1 $(DESTDIR)$(man1dir)/
	# Copy .desktop file
	mkdir -p $(DESTDIR)$(datarootdir)/applications/
	$(INSTALL_F) $(CODEHOME)/contrib/code.desktop $(DESTDIR)$(datarootdir)/applications/
	# Install appdata file
	mkdir -p $(DESTDIR)$(datarootdir)/metainfo/
	$(INSTALL_F) $(CODEHOME)/contrib/code.appdata.xml $(DESTDIR)$(datarootdir)/metainfo/

	# Update RPATH entries and CODE_SYSTEM_IMAGE_PATH if $(private_libdir_rel) != $(build_private_libdir_rel)
ifneq ($(private_libdir_rel),$(build_private_libdir_rel))
ifeq ($(OS), Darwin)
ifneq ($(DARWIN_FRAMEWORK),1)
	for j in $(CODE_TARGETS) ; do \
		install_name_tool -rpath @executable_path/$(build_private_libdir_rel) @executable_path/$(private_libdir_rel) $(DESTDIR)$(bindir)/$$j; \
		install_name_tool -add_rpath @executable_path/$(build_libdir_rel) @executable_path/$(libdir_rel) $(DESTDIR)$(bindir)/$$j; \
	done
endif
else ifneq (,$(findstring $(OS),Linux FreeBSD))
	for j in $(CODE_TARGETS) ; do \
		$(PATCHELF) $(PATCHELF_SET_RPATH_ARG) '$$ORIGIN/$(private_libdir_rel):$$ORIGIN/$(libdir_rel)' $(DESTDIR)$(bindir)/$$j; \
	done
endif

	# Overwrite CODE_SYSTEM_IMAGE_PATH in libcode-internal
	if [ "$(DARWIN_FRAMEWORK)" = "0" ]; then \
		RELEASE_TARGET=$(DESTDIR)$(private_libdir)/libcode-internal.$(SHLIB_EXT); \
		DEBUG_TARGET=$(DESTDIR)$(private_libdir)/libcode-internal-debug.$(SHLIB_EXT); \
	else \
		RELEASE_TARGET=$(DESTDIR)$(prefix)/$(framework_dylib); \
		DEBUG_TARGET=$(DESTDIR)$(prefix)/$(framework_dylib)_debug; \
	fi; \
	if [ "$(CODE_BUILD_MODE)" = "release" ]; then \
		$(call stringreplace,$${RELEASE_TARGET},sys.$(SHLIB_EXT)$$,$(private_libdir_rel)/sys.$(SHLIB_EXT)); \
	elif [ "$(CODE_BUILD_MODE)" = "debug" ]; then \
		$(call stringreplace,$${DEBUG_TARGET},sys-debug.$(SHLIB_EXT)$$,$(private_libdir_rel)/sys-debug.$(SHLIB_EXT)); \
	fi;
endif

	# Set rpath for libcode-internal, which is moving from `../lib` to `../lib/code`.
ifeq ($(OS), Darwin)
ifneq ($(DARWIN_FRAMEWORK),1)
ifeq ($(CODE_BUILD_MODE),release)
	install_name_tool -add_rpath @loader_path/$(reverse_private_libdir_rel)/ $(DESTDIR)$(private_libdir)/libcode-internal.$(SHLIB_EXT)
	install_name_tool -add_rpath @loader_path/$(reverse_private_libdir_rel)/ $(DESTDIR)$(private_libdir)/libcode-codegen.$(SHLIB_EXT)
else ifeq ($(CODE_BUILD_MODE),debug)
	install_name_tool -add_rpath @loader_path/$(reverse_private_libdir_rel)/ $(DESTDIR)$(private_libdir)/libcode-internal-debug.$(SHLIB_EXT)
	install_name_tool -add_rpath @loader_path/$(reverse_private_libdir_rel)/ $(DESTDIR)$(private_libdir)/libcode-codegen-debug.$(SHLIB_EXT)
endif
endif
else ifneq (,$(findstring $(OS),Linux FreeBSD))
ifeq ($(CODE_BUILD_MODE),release)
	$(PATCHELF) $(PATCHELF_SET_RPATH_ARG) '$$ORIGIN:$$ORIGIN/$(reverse_private_libdir_rel)' $(DESTDIR)$(private_libdir)/libcode-internal.$(SHLIB_EXT)
	$(PATCHELF) $(PATCHELF_SET_RPATH_ARG) '$$ORIGIN:$$ORIGIN/$(reverse_private_libdir_rel)' $(DESTDIR)$(private_libdir)/libcode-codegen.$(SHLIB_EXT)
else ifeq ($(CODE_BUILD_MODE),debug)
	$(PATCHELF) $(PATCHELF_SET_RPATH_ARG) '$$ORIGIN:$$ORIGIN/$(reverse_private_libdir_rel)' $(DESTDIR)$(private_libdir)/libcode-internal-debug.$(SHLIB_EXT)
	$(PATCHELF) $(PATCHELF_SET_RPATH_ARG) '$$ORIGIN:$$ORIGIN/$(reverse_private_libdir_rel)' $(DESTDIR)$(private_libdir)/libcode-codegen-debug.$(SHLIB_EXT)
endif
endif

	# Fix rpaths for dependencies. This should be fixed in BinaryBuilder later.
ifeq ($(OS), Linux)
	-$(PATCHELF) $(PATCHELF_SET_RPATH_ARG) '$$ORIGIN' $(DESTDIR)$(private_shlibdir)/libLLVM.$(SHLIB_EXT)
endif
ifneq ($(LOADER_BUILD_DEP_LIBS),$(LOADER_INSTALL_DEP_LIBS))
	# Next, overwrite relative path to libcode-internal in our loader if $$(LOADER_BUILD_DEP_LIBS) != $$(LOADER_INSTALL_DEP_LIBS)
ifeq ($(CODE_BUILD_MODE),release)
	$(call stringreplace,$(DESTDIR)$(shlibdir)/libcode.$(CODE_MAJOR_MINOR_SHLIB_EXT),$(LOADER_BUILD_DEP_LIBS)$$,$(LOADER_INSTALL_DEP_LIBS))
else ifeq ($(CODE_BUILD_MODE),debug)
	$(call stringreplace,$(DESTDIR)$(shlibdir)/libcode-debug.$(CODE_MAJOR_MINOR_SHLIB_EXT),$(LOADER_DEBUG_BUILD_DEP_LIBS)$$,$(LOADER_DEBUG_INSTALL_DEP_LIBS))
endif
endif

ifeq ($(OS),FreeBSD)
	# On FreeBSD, remove the build's libdir from each library's RPATH
	$(CODEHOME)/contrib/fixup-rpath.sh "$(PATCHELF)" $(DESTDIR)$(libdir) $(build_libdir)
	$(CODEHOME)/contrib/fixup-rpath.sh "$(PATCHELF)" $(DESTDIR)$(private_libdir) $(build_libdir)
	$(CODEHOME)/contrib/fixup-rpath.sh "$(PATCHELF)" $(DESTDIR)$(bindir) $(build_libdir)
	# Set libgfortran's RPATH to ORIGIN instead of GCCPATH. It's only libgfortran that
	# needs to be fixed here, as libgcc_s and libquadmath don't have RPATHs set. If we
	# don't set libgfortran's RPATH, it won't be able to find its friends on systems
	# that don't have the exact GCC port installed used for the build.
	for lib in $(DESTDIR)$(private_libdir)/libgfortran*$(SHLIB_EXT)*; do \
		$(PATCHELF) $(PATCHELF_SET_RPATH_ARG) '$$ORIGIN' $$lib; \
	done
endif

	mkdir -p $(DESTDIR)$(sysconfdir)
	cp -R $(build_sysconfdir)/code $(DESTDIR)$(sysconfdir)/

ifeq ($(DARWIN_FRAMEWORK),1)
	$(MAKE) -C $(CODEHOME)/contrib/mac/framework frameworknoinstall
endif

distclean:
	-rm -fr $(BUILDROOT)/code-*.tar.gz $(BUILDROOT)/code*.exe $(BUILDROOT)/code-$(CODE_COMMIT)

binary-dist: distclean
ifeq ($(USE_SYSTEM_BLAS),0)
ifeq ($(ISX86),1)
ifneq ($(OPENBLAS_DYNAMIC_ARCH),1)
	@echo OpenBLAS must be rebuilt with OPENBLAS_DYNAMIC_ARCH=1 to use binary-dist target
	@false
endif
endif
endif

ifeq ($(USE_BINARYBUILDER_OPENBLAS),0)
	# https://github.com/NeXTCodeLang/code/issues/46579
	USE_BINARYBUILDER_OBJCONV=0
endif

ifneq ($(prefix),$(abspath code-$(CODE_COMMIT)))
	$(error prefix must not be set for make binary-dist)
endif
ifneq ($(DESTDIR),)
	$(error DESTDIR must not be set for make binary-dist)
endif
	@$(MAKE) -C $(BUILDROOT) -f $(CODEHOME)/Makefile install
	cp $(CODEHOME)/LICENSE.md $(BUILDROOT)/code-$(CODE_COMMIT)
ifeq ($(OS), Linux)
	# Copy over any bundled ca certs we picked up from the system during build
	-cp $(build_datarootdir)/code/cert.pem $(DESTDIR)$(datarootdir)/code/
endif
ifeq ($(OS), WINNT)
	cd $(BUILDROOT)/code-$(CODE_COMMIT)/bin && rm -f llvm* llc.exe lli.exe opt.exe LTO.dll bugpoint.exe macho-dump.exe
endif
	cd $(BUILDROOT) && $(TAR) zcvf $(CODE_BINARYDIST_FILENAME).tar.gz code-$(CODE_COMMIT)


exe:
	# run Inno Setup to compile installer.
	# Note that we disable MSYS2 path munging, as it interferes with the `/` options:
	MSYS2_ARG_CONV_EXCL='*' $(call spawn,$(CODEHOME)/dist-extras/inno/iscc.exe /DAppVersion=$(CODE_VERSION) /DSourceDir="$(call cygpath_w,$(BUILDROOT)/code-$(CODE_COMMIT))" /DRepoDir="$(call cygpath_w,$(CODEHOME))" /F"$(CODE_BINARYDIST_FILENAME)" /O"$(call cygpath_w,$(BUILDROOT))" $(INNO_ARGS) $(call cygpath_w,$(CODEHOME)/contrib/windows/build-installer.iss))
	chmod a+x "$(BUILDROOT)/$(CODE_BINARYDIST_FILENAME).exe"

app:
	$(MAKE) -C contrib/mac/app
	@mv contrib/mac/app/$(CODE_BINARYDIST_FILENAME).dmg $(BUILDROOT)

darwinframework:
	$(MAKE) -C $(CODEHOME)/contrib/mac/framework

light-source-dist.tmp: $(BUILDROOT)/doc/_build/html/en/index.html
ifneq ($(BUILDROOT),$(CODEHOME))
	$(error make light-source-dist does not work in out-of-tree builds)
endif
	# Save git information
	-@$(MAKE) -C $(CODEHOME)/base version_git.code.phony

	# Create file light-source-dist.tmp to hold all the filenames that go into the tarball
	echo "base/version_git.code" > light-source-dist.tmp

	# Download all runtimes and include the tarball filenames in light-source-dist.tmp
	@$(MAKE) -C runtime getall DEPS_GIT=0 USE_BINARYBUILDER=0
	-ls runtime/srccache/*.tar.gz >> light-source-dist.tmp
	-ls runtime/*/runtimeArtifacts.toml >> light-source-dist.tmp

	# Include all git-tracked filenames
	git ls-files >> light-source-dist.tmp

	# Include documentation filenames
	find doc/_build/html >> light-source-dist.tmp

# Make tarball with only NeXTCode code + runtime tarballs
light-source-dist: light-source-dist.tmp
	# Prefix everything with "code-$(commit-sha)/" or "code-$(version)/" and then create tarball
	# To achieve prefixing, we temporarily create a symlink in the source directory that points back
	# to the source directory.
	sed -e "s_.*_code-${CODE_COMMIT}/&_" light-source-dist.tmp > light-source-dist.tmp1
	ln -s . code-${CODE_COMMIT}
	tar -cz --no-recursion -T light-source-dist.tmp1 -f code-$(CODE_VERSION)_$(CODE_COMMIT).tar.gz
	rm code-${CODE_COMMIT}

source-dist:
	@echo \'source-dist\' target is deprecated: use \'full-source-dist\' instead.

# Make tarball with NeXTCode code plus all dependencies
full-source-dist: light-source-dist.tmp
	# Get all the dependencies downloaded
	@$(MAKE) -C deps getall DEPS_GIT=0 USE_BINARYBUILDER=0

	# Create file full-source-dist.tmp to hold all the filenames that go into the tarball
	cp light-source-dist.tmp full-source-dist.tmp
	-ls deps/srccache/*.tar.gz deps/srccache/*.tar.bz2 deps/srccache/*.tar.xz deps/srccache/*.tgz deps/srccache/*.zip deps/srccache/*.pem >> full-source-dist.tmp

	# Prefix everything with "code-$(commit-sha)/" or "code-$(version)/" and then create tarball
	# To achieve prefixing, we temporarily create a symlink in the source directory that points back
	# to the source directory.
	sed -e "s_.*_code-${CODE_COMMIT}/&_" full-source-dist.tmp > full-source-dist.tmp1
	ln -s . code-${CODE_COMMIT}
	tar -cz --no-recursion -T full-source-dist.tmp1 -f code-$(CODE_VERSION)_$(CODE_COMMIT)-full.tar.gz
	rm code-${CODE_COMMIT}

clean: | $(CLEAN_TARGETS)
	@-$(MAKE) -C $(BUILDROOT)/base clean
	@-$(MAKE) -C $(BUILDROOT)/doc clean
	@-$(MAKE) -C $(BUILDROOT)/src clean
	@-$(MAKE) -C $(BUILDROOT)/cli clean
	@-$(MAKE) -C $(BUILDROOT)/test clean
	@-$(MAKE) -C $(BUILDROOT)/runtime clean
	@-$(MAKE) -C $(BUILDROOT) -f pkgimage.mk clean
	-rm -f $(BUILDROOT)/code
	-rm -f $(BUILDROOT)/*.tar.gz
	-rm -f $(build_depsbindir)/stringreplace \
	   $(BUILDROOT)/light-source-dist.tmp $(BUILDROOT)/light-source-dist.tmp1 \
	   $(BUILDROOT)/full-source-dist.tmp $(BUILDROOT)/full-source-dist.tmp1
	-rm -fr $(build_private_libdir)
# Teporarily add this line to the Makefile to remove extras
	-rm -fr $(build_datarootdir)/code/extras

cleanall: clean
	@-$(MAKE) -C $(BUILDROOT)/src clean-flisp clean-support
	@-$(MAKE) -C $(BUILDROOT)/deps clean-libuv
	-rm -fr $(build_prefix) $(build_staging)

distcleanall: cleanall
	@-$(MAKE) -C $(BUILDROOT)/runtime distclean
	@-$(MAKE) -C $(BUILDROOT)/deps distcleanall
	@-$(MAKE) -C $(BUILDROOT)/doc cleanall

.FORCE:
.PHONY: .FORCE default debug release check-whitespace release-candidate \
	code-debug code-release code-runtime code-deps code-deps-libs \
	code-cli-release code-cli-debug code-src-release code-src-debug \
	code-symlink code-base code-sysimg code-sysimg-ji code-sysimg-release code-sysimg-debug \
	test testall testall1 test \
	clean distcleanall cleanall $(CLEAN_TARGETS) \
	run-code run-code-debug run-code-release run \
	install binary-dist light-source-dist.tmp light-source-dist \
	dist full-source-dist source-dist

test: check-whitespace $(CODE_BUILD_MODE)
	@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/test default CODE_BUILD_MODE=$(CODE_BUILD_MODE)

testall: check-whitespace $(CODE_BUILD_MODE)
	cp $(CODE_SYSIMG) $(BUILDROOT)/local.$(SHLIB_EXT)
	$(call spawn,$(CODE_EXECUTABLE) -J $(call cygpath_w,$(BUILDROOT)/local.$(SHLIB_EXT)) -e 'true')
	rm $(BUILDROOT)/local.$(SHLIB_EXT)
	@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/test all CODE_BUILD_MODE=$(CODE_BUILD_MODE)

testall1: check-whitespace $(CODE_BUILD_MODE)
	@env CODE_CPU_THREADS=1 $(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/test all CODE_BUILD_MODE=$(CODE_BUILD_MODE)

test-%: check-whitespace $(CODE_BUILD_MODE) .FORCE
	@([ $$(( $$(date +%s) - $$(date -r $(build_private_libdir)/sys.$(SHLIB_EXT) +%s) )) -le 100 ] && \
		printf '\033[93m    HINT The system image was recently rebuilt. Are you aware of the test-revise-* targets? See CONTRIBUTING.md. \033[0m\n') || true
	@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/test $* CODE_BUILD_MODE=$(CODE_BUILD_MODE)

test-revise-%: .FORCE
	@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/test revise-$* CODE_BUILD_MODE=$(CODE_BUILD_MODE)

# download target for some hardcoded windows dependencies
.PHONY: win-extras wine_path
win-extras:
	@$(MAKE) -C $(BUILDROOT)/deps install-p7zip
	mkdir -p $(CODEHOME)/dist-extras
	cd $(CODEHOME)/dist-extras && \
	$(CODEDOWNLOAD) https://www.jrsoftware.org/download.php/is.exe && \
	chmod a+x is.exe && \
	MSYS2_ARG_CONV_EXCL='*' $(call spawn, $(CODEHOME)/dist-extras/is.exe /DIR="$(call cygpath_w,$(CODEHOME)/dist-extras/inno)" /PORTABLE=1 /CURRENTUSER /VERYSILENT)

# various statistics about the build that may interest the user
ifeq ($(USE_SYSTEM_LLVM), 1)
LLVM_SIZE := llvm-size$(EXE)
else
LLVM_SIZE := PATH=$(build_bindir):$$PATH; $(build_depsbindir)/llvm-size$(EXE)
endif
build-stats:
ifeq ($(USE_BINARYBUILDER_LLVM),1)
	@$(MAKE) -C deps install-llvm-tools
endif
	@printf $(JULCOLOR)' ==> ./code binary sizes\n'$(ENDCOLOR)
	$(call spawn,$(LLVM_SIZE) -A $(call cygpath_w,$(build_private_libdir)/sys.$(SHLIB_EXT)) \
		$(call cygpath_w,$(build_shlibdir)/libcode.$(SHLIB_EXT)) \
		$(call cygpath_w,$(build_bindir)/code$(EXE)))
	@printf $(JULCOLOR)' ==> ./code launch speedtest\n'$(ENDCOLOR)
	@time $(call spawn,$(build_bindir)/code$(EXE) -e '')
	@time $(call spawn,$(build_bindir)/code$(EXE) -e '')
	@time $(call spawn,$(build_bindir)/code$(EXE) -e '')

print-locale:
	@locale
